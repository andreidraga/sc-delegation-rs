{
    "name": "DelegationFull",
    "constructor": {
        "docs": [
            "This is the contract constructor, called only once when the contract is deployed."
        ],
        "inputs": [
            {
                "name": "auction_contract_addr",
                "type": "Address"
            },
            {
                "name": "service_fee_per_10000",
                "type": "u32"
            },
            {
                "name": "owner_min_stake_share_per_10000",
                "type": "u32"
            },
            {
                "name": "n_blocks_before_unbond",
                "type": "u64"
            },
            {
                "name": "minimum_stake",
                "type": "BigUint"
            },
            {
                "name": "total_delegation_cap",
                "type": "BigUint"
            }
        ],
        "outputs": []
    },
    "endpoints": [
        {
            "name": "version",
            "inputs": [],
            "outputs": [
                {
                    "type": "utf-8 string"
                }
            ]
        },
        {
            "docs": [
                "The number of nodes that will run with the contract stake, as configured by the owner."
            ],
            "name": "getNumNodes",
            "inputs": [],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "docs": [
                "Each node gets a node id. This is in order to be able to iterate over their data.",
                "This is a mapping from node BLS key to node id.",
                "The key is the bytes \"node_id\" concatenated with the BLS key. The value is the node id.",
                "Ids start from 1 because 0 means unset of None."
            ],
            "name": "getNodeId",
            "inputs": [
                {
                    "name": "bls_key",
                    "type": "BLSKey"
                }
            ],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "name": "getNodeSignature",
            "inputs": [
                {
                    "name": "bls_key",
                    "type": "BLSKey"
                }
            ],
            "outputs": [
                {
                    "type": "optional<BLSSignature>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "getNodeState",
            "inputs": [
                {
                    "name": "bls_key",
                    "type": "BLSKey"
                }
            ],
            "outputs": [
                {
                    "type": "NodeState"
                }
            ]
        },
        {
            "name": "getAllNodeStates",
            "inputs": [],
            "outputs": [
                {
                    "type": "variadic<multi<BLSKey,u8>>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "getNodeBlockNonceOfUnstake",
            "inputs": [
                {
                    "name": "bls_key",
                    "type": "BLSKey"
                }
            ],
            "outputs": [
                {
                    "type": "optional<u64>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "addNodes",
            "inputs": [
                {
                    "name": "bls_keys_signatures",
                    "type": "variadic<multi<BLSKey,BLSSignature>>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "name": "removeNodes",
            "inputs": [
                {
                    "name": "bls_keys",
                    "type": "variadic<BLSKey>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "docs": [
                "Each delegator gets a user id. This is in order to be able to iterate over their data.",
                "This is a mapping from delegator address to delegator id.",
                "The key is the bytes \"user_id\" concatenated with their public key.",
                "The value is the user id."
            ],
            "name": "getUserId",
            "inputs": [
                {
                    "name": "address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "name": "getUserAddress",
            "inputs": [
                {
                    "name": "user_id",
                    "type": "u32"
                }
            ],
            "outputs": [
                {
                    "type": "Address"
                }
            ]
        },
        {
            "docs": [
                "Retrieves the number of delegators, including the owner,",
                "even if they no longer have anything in the contract."
            ],
            "name": "getNumUsers",
            "inputs": [],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "name": "updateUserAddress",
            "inputs": [
                {
                    "name": "addresses",
                    "type": "variadic<Address>",
                    "multi_arg": true
                }
            ],
            "outputs": [
                {
                    "type": "u32"
                },
                {
                    "type": "u32"
                },
                {
                    "type": "u32"
                }
            ]
        },
        {
            "name": "userIdsWithoutAddress",
            "inputs": [],
            "outputs": [
                {
                    "type": "variadic<u32>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "fundById",
            "inputs": [
                {
                    "name": "id",
                    "type": "u32"
                }
            ],
            "outputs": [
                {
                    "type": "FundItem"
                }
            ]
        },
        {
            "name": "totalStake",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "docs": [
                "Yields how much a user has staked in the contract."
            ],
            "name": "getUserStake",
            "inputs": [
                {
                    "name": "user_address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getUserWithdrawOnlyStake",
            "inputs": [
                {
                    "name": "user_address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getUserWaitingStake",
            "inputs": [
                {
                    "name": "user_address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getUserActiveStake",
            "inputs": [
                {
                    "name": "user_address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getUserUnstakedStake",
            "inputs": [
                {
                    "name": "user_address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getUserDeferredPaymentStake",
            "inputs": [
                {
                    "name": "user_address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getTotalWithdrawOnlyStake",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getTotalWaitingStake",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getTotalActiveStake",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getTotalUnstakedStake",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getTotalDeferredPaymentStake",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getUserStakeByType",
            "inputs": [
                {
                    "name": "user_address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "BigUint"
                },
                {
                    "type": "BigUint"
                },
                {
                    "type": "BigUint"
                },
                {
                    "type": "BigUint"
                },
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getTotalStakeByType",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                },
                {
                    "type": "BigUint"
                },
                {
                    "type": "BigUint"
                },
                {
                    "type": "BigUint"
                },
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getAllUserStakeByType",
            "inputs": [],
            "outputs": [
                {
                    "type": "variadic<multi<Address,multi<BigUint,BigUint,BigUint,BigUint,BigUint>>>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "getUserDeferredPaymentList",
            "inputs": [
                {
                    "name": "user_address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "variadic<multi<BigUint,u64>>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "getFullWaitingList",
            "inputs": [],
            "outputs": [
                {
                    "type": "variadic<multi<Address,BigUint,u64>>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "getFullActiveList",
            "inputs": [],
            "outputs": [
                {
                    "type": "variadic<multi<Address,BigUint>>",
                    "multi_result": true
                }
            ]
        },
        {
            "docs": [
                "Owner activates specific nodes."
            ],
            "name": "stakeNodes",
            "inputs": [
                {
                    "name": "amount_to_stake",
                    "type": "BigUint"
                },
                {
                    "name": "bls_keys",
                    "type": "variadic<BLSKey>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "docs": [
                "Unstakes from the auction smart contract.",
                "The nodes will stop receiving rewards, but stake cannot be yet reclaimed.",
                "This operation is performed by the owner.",
                "Does not unstake tokens."
            ],
            "name": "unStakeNodes",
            "inputs": [
                {
                    "name": "bls_keys",
                    "type": "variadic<BLSKey>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "docs": [
                "Unstakes from the auction smart contract.",
                "The nodes will stop receiving rewards, but stake cannot be yet reclaimed.",
                "This operation is performed by the owner.",
                "Also unstakes tokens."
            ],
            "name": "unStakeNodesAndTokens",
            "inputs": [
                {
                    "name": "bls_keys",
                    "type": "variadic<BLSKey>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "docs": [
                "Owner can retry a callback in case of callback failure.",
                "Warning: misuse can lead to state inconsistency."
            ],
            "name": "forceNodeUnBondPeriod",
            "inputs": [
                {
                    "name": "bls_keys",
                    "type": "variadic<BLSKey>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "docs": [
                "Calls unbond for all provided nodes. Will fail if node cannot be unbonded."
            ],
            "name": "unBondNodes",
            "inputs": [
                {
                    "name": "bls_keys",
                    "type": "variadic<BLSKey>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "docs": [
                "Calls unbond for all nodes that are in the unbond period and are due.",
                "Nothing happens if no nodes can be unbonded."
            ],
            "name": "unBondAllPossibleNodes",
            "inputs": [],
            "outputs": [
                {
                    "type": "optional<AsyncCall>",
                    "multi_result": true
                }
            ]
        },
        {
            "docs": [
                "Claims from auction SC funds that were sent but are not required to run the nodes."
            ],
            "name": "claimUnusedFunds",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "unJailNodes",
            "payableInTokens": [
                "EGLD"
            ],
            "inputs": [
                {
                    "name": "bls_keys",
                    "type": "variadic<BLSKey>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "docs": [
                "Yields the address of the contract with which staking will be performed.",
                "This address is standard in the protocol, but it is saved in storage to avoid hardcoding it."
            ],
            "name": "getAuctionContractAddress",
            "inputs": [],
            "outputs": [
                {
                    "type": "Address"
                }
            ]
        },
        {
            "docs": [
                "The proportion of rewards that goes to the owner as compensation for running the nodes.",
                "10000 = 100%."
            ],
            "name": "getServiceFee",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getTotalDelegationCap",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "isBootstrapMode",
            "inputs": [],
            "outputs": [
                {
                    "type": "bool"
                }
            ]
        },
        {
            "docs": [
                "The minimum proportion of stake that has to be provided by the owner.",
                "10000 = 100%."
            ],
            "name": "getOwnerMinStakeShare",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "docs": [
                "Minimum number of n_blocks between unstake and fund getting into inactive state."
            ],
            "name": "getNumBlocksBeforeUnBond",
            "inputs": [],
            "outputs": [
                {
                    "type": "u64"
                }
            ]
        },
        {
            "name": "setNumBlocksBeforeUnBond",
            "inputs": [
                {
                    "name": "n_blocks_before_unbond",
                    "type": "u64"
                }
            ],
            "outputs": []
        },
        {
            "docs": [
                "Delegators are not allowed make transactions with less then this amount of stake (of any type).",
                "Zero means disabled."
            ],
            "name": "getMinimumStake",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "setMinimumStake",
            "inputs": [
                {
                    "name": "minimum_stake",
                    "type": "BigUint"
                }
            ],
            "outputs": []
        },
        {
            "name": "getGlobalOperationCheckpoint",
            "inputs": [],
            "outputs": [
                {
                    "type": "GlobalOpCheckpoint"
                }
            ]
        },
        {
            "name": "isGlobalOperationInProgress",
            "inputs": [],
            "outputs": [
                {
                    "type": "bool"
                }
            ]
        },
        {
            "docs": [
                "Yields all the rewards received by the contract since its creation.",
                "This value is monotonously increasing - it can never decrease.",
                "Handing out rewards will not decrease this value.",
                "This is to keep track of how many funds entered the contract. It ignores any funds leaving the contract.",
                "Individual rewards are computed based on this value.",
                "For each user we keep a record on what was the value of the historical rewards when they last claimed.",
                "Subtracting that from the current historical rewards yields how much accumulated in the contract since they last claimed."
            ],
            "name": "getTotalCumulatedRewards",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "docs": [
                "Yields how much a user is able to claim in rewards at the present time.",
                "Does not update storage."
            ],
            "name": "getClaimableRewards",
            "inputs": [
                {
                    "name": "user",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "docs": [
                "Utility readonly function to check how many unclaimed rewards currently reside in the contract."
            ],
            "name": "getTotalUnclaimedRewards",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getTotalUnProtected",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "docs": [
                "Invariant: should never return error."
            ],
            "name": "validateOwnerStakeShare",
            "inputs": [],
            "outputs": []
        },
        {
            "docs": [
                "Invariant: should never return error."
            ],
            "name": "validateDelegationCapInvariant",
            "inputs": [],
            "outputs": []
        },
        {
            "docs": [
                "Continues executing any interrupted operation.",
                "Returns true if still out of gas, false if computation completed."
            ],
            "name": "continueGlobalOperation",
            "inputs": [],
            "outputs": [
                {
                    "type": "OperationCompletionStatus"
                }
            ]
        },
        {
            "docs": [
                "Total delegation cap can be modified by owner only.",
                "It will recalculate and set the checkpoint for all the delegators"
            ],
            "name": "modifyTotalDelegationCap",
            "inputs": [
                {
                    "name": "new_total_cap",
                    "type": "BigUint"
                }
            ],
            "outputs": [
                {
                    "type": "OperationCompletionStatus"
                }
            ]
        },
        {
            "docs": [
                "The stake per node can be changed by the owner.",
                "It does not get set in the constructor, so the owner has to manually set it after the contract is deployed."
            ],
            "name": "setServiceFee",
            "inputs": [
                {
                    "name": "service_fee_per_10000",
                    "type": "u32"
                }
            ],
            "outputs": [
                {
                    "type": "OperationCompletionStatus"
                }
            ]
        },
        {
            "docs": [
                "Retrieve those rewards to which the caller is entitled.",
                "Will send:",
                "- new rewards",
                "- rewards that were previously computed but not sent"
            ],
            "name": "claimRewards",
            "inputs": [],
            "outputs": []
        },
        {
            "docs": [
                "Delegate stake to the smart contract.",
                "Stake is initially inactive, so does it not produce rewards."
            ],
            "name": "stake",
            "payableInTokens": [
                "EGLD"
            ],
            "inputs": [],
            "outputs": []
        },
        {
            "docs": [
                "unStake - the user will announce that he wants to get out of the contract",
                "selected funds will change from active to inactive, but claimable only after unBond period ends"
            ],
            "name": "unStake",
            "inputs": [
                {
                    "name": "amount",
                    "type": "BigUint"
                }
            ],
            "outputs": []
        },
        {
            "name": "getUnStakeable",
            "inputs": [
                {
                    "name": "user_address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "unBond",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getUnBondable",
            "inputs": [
                {
                    "name": "user_address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "docs": [
                "Raw id of the last checkpoint reached by any of the dust cleanup endpoints."
            ],
            "name": "dustCleanupCheckpoint",
            "inputs": [],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "docs": [
                "Counts fund buckets in the waiting list that are below a certain threshold.",
                "Unlike most views, yields the number of entries, rather than the sum of EGLD."
            ],
            "name": "countDustItemsWaitingList",
            "inputs": [
                {
                    "name": "dust_limit",
                    "type": "BigUint"
                }
            ],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "docs": [
                "Counts fund buckets in the active staking list that are below a certain threshold.",
                "Unlike most views, yields the number of entries, rather than the sum of EGLD."
            ],
            "name": "countDustItemsActive",
            "inputs": [
                {
                    "name": "dust_limit",
                    "type": "BigUint"
                }
            ],
            "outputs": [
                {
                    "type": "u32"
                }
            ]
        },
        {
            "docs": [
                "Unstakes all fund buckets in the waiting list that are below a certain threshold.",
                "Will stop if running low on gas.",
                "Does not block the rest of the contract. If any operation interferes with an interrupted",
                "dust cleanup, the operation can be begun again.",
                "It will auto-reset if the list ends or the current item is no longer valid."
            ],
            "name": "dustCleanupWaitingList",
            "inputs": [
                {
                    "name": "dust_limit",
                    "type": "BigUint"
                }
            ],
            "outputs": []
        },
        {
            "docs": [
                "Unstakes and unbonds all active fund buckets that are below a certain threshold.",
                "Unlike the regular unstake/unbond process, it will send the funds directly in `WithdrawOnly` state.",
                "Will stop if running low on gas.",
                "Does not block the rest of the contract. If any operation interferes with an interrupted",
                "dust cleanup, the operation can be begun again.",
                "It will auto-reset if the list ends or the current item is no longer valid."
            ],
            "name": "dustCleanupActive",
            "inputs": [
                {
                    "name": "dust_limit",
                    "type": "BigUint"
                }
            ],
            "outputs": []
        },
        {
            "name": "dnsRegister",
            "payableInTokens": [
                "EGLD"
            ],
            "inputs": [
                {
                    "name": "dns_address",
                    "type": "Address"
                },
                {
                    "name": "name",
                    "type": "bytes"
                }
            ],
            "outputs": []
        },
        {
            "name": "setFeatureFlag",
            "inputs": [
                {
                    "name": "feature_name",
                    "type": "bytes"
                },
                {
                    "name": "value",
                    "type": "bool"
                }
            ],
            "outputs": []
        },
        {
            "name": "isPaused",
            "inputs": [],
            "outputs": [
                {
                    "type": "bool"
                }
            ]
        },
        {
            "name": "pause",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "unpause",
            "inputs": [],
            "outputs": []
        }
    ],
    "types": {
        "BLSKey": {
            "type": "struct",
            "fields": [
                {
                    "name": "0",
                    "type": "array96<u8>"
                }
            ]
        },
        "BLSSignature": {
            "type": "struct",
            "fields": [
                {
                    "name": "0",
                    "type": "array48<u8>"
                }
            ]
        },
        "ComputeAllRewardsData": {
            "type": "struct",
            "docs": [
                "Models the interrupted state of compute_all_rewards."
            ],
            "fields": [
                {
                    "name": "last_id",
                    "type": "u32"
                },
                {
                    "name": "sum_unclaimed",
                    "type": "BigUint"
                },
                {
                    "name": "rewards_checkpoint",
                    "type": "BigUint"
                }
            ]
        },
        "FundDescription": {
            "type": "enum",
            "variants": [
                {
                    "docs": [
                        "Funds that can only be extracted from contract. Will never be used as stake."
                    ],
                    "name": "WithdrawOnly",
                    "discriminant": 0
                },
                {
                    "docs": [
                        "Inactive stake, waiting in the queue to be activated."
                    ],
                    "name": "Waiting",
                    "discriminant": 1,
                    "fields": [
                        {
                            "name": "created",
                            "type": "u64"
                        }
                    ]
                },
                {
                    "name": "_PendingAct",
                    "discriminant": 2
                },
                {
                    "name": "_ActiveFailed",
                    "discriminant": 3
                },
                {
                    "docs": [
                        "Stake is locked in the protocol and rewards are coming in.",
                        "Users cannot withdraw stake, but they can exchange their share of the total stake amongst each other."
                    ],
                    "name": "Active",
                    "discriminant": 4
                },
                {
                    "docs": [
                        "Same as Active, but no rewards are coming in."
                    ],
                    "name": "UnStaked",
                    "discriminant": 5,
                    "fields": [
                        {
                            "name": "created",
                            "type": "u64"
                        }
                    ]
                },
                {
                    "name": "DeferredPayment",
                    "discriminant": 6,
                    "fields": [
                        {
                            "name": "created",
                            "type": "u64"
                        }
                    ]
                }
            ]
        },
        "FundItem": {
            "type": "struct",
            "docs": [
                "A unit of balance, usually stake.",
                "Contains a description of the source/intent of the funds, together with a balance."
            ],
            "fields": [
                {
                    "name": "fund_desc",
                    "type": "FundDescription"
                },
                {
                    "name": "user_id",
                    "type": "u32"
                },
                {
                    "name": "balance",
                    "type": "BigUint"
                },
                {
                    "name": "type_list_next",
                    "type": "u32"
                },
                {
                    "name": "type_list_prev",
                    "type": "u32"
                },
                {
                    "name": "user_list_next",
                    "type": "u32"
                },
                {
                    "name": "user_list_prev",
                    "type": "u32"
                }
            ]
        },
        "GlobalOpCheckpoint": {
            "type": "enum",
            "docs": [
                "Models any computation that can pause itself when it runs out of gas and continue in another block."
            ],
            "variants": [
                {
                    "name": "None",
                    "discriminant": 0
                },
                {
                    "name": "ModifyTotalDelegationCap",
                    "discriminant": 1,
                    "fields": [
                        {
                            "name": "0",
                            "type": "ModifyTotalDelegationCapData"
                        }
                    ]
                },
                {
                    "name": "ChangeServiceFee",
                    "discriminant": 2,
                    "fields": [
                        {
                            "name": "new_service_fee",
                            "type": "BigUint"
                        },
                        {
                            "name": "compute_rewards_data",
                            "type": "ComputeAllRewardsData"
                        }
                    ]
                }
            ]
        },
        "ModifyDelegationCapStep": {
            "type": "enum",
            "docs": [
                "Models the steps that need to be executed when modifying the total delegation cap."
            ],
            "variants": [
                {
                    "name": "ComputeAllRewards",
                    "discriminant": 0,
                    "fields": [
                        {
                            "name": "0",
                            "type": "ComputeAllRewardsData"
                        }
                    ]
                },
                {
                    "name": "SwapWaitingToActive",
                    "discriminant": 1
                },
                {
                    "name": "SwapUnstakedToDeferredPayment",
                    "discriminant": 2
                },
                {
                    "name": "SwapActiveToDeferredPayment",
                    "discriminant": 3
                }
            ]
        },
        "ModifyTotalDelegationCapData": {
            "type": "struct",
            "docs": [
                "Contains data needed to be persisted while performing a change in the total delegation cap."
            ],
            "fields": [
                {
                    "name": "new_delegation_cap",
                    "type": "BigUint"
                },
                {
                    "name": "remaining_swap_waiting_to_active",
                    "type": "BigUint"
                },
                {
                    "name": "remaining_swap_active_to_def_p",
                    "type": "BigUint"
                },
                {
                    "name": "remaining_swap_unstaked_to_def_p",
                    "type": "BigUint"
                },
                {
                    "name": "step",
                    "type": "ModifyDelegationCapStep"
                }
            ]
        },
        "NodeState": {
            "type": "enum",
            "docs": [
                "Status of a node."
            ],
            "variants": [
                {
                    "docs": [
                        "Node is registered in delegation, but not in the auction SC."
                    ],
                    "name": "Inactive",
                    "discriminant": 0
                },
                {
                    "docs": [
                        "Stake call to auction sent, but callback not yet received."
                    ],
                    "name": "PendingActivation",
                    "discriminant": 1
                },
                {
                    "docs": [
                        "Node stake was sent to the auction SC, but the transaction failed for the node.",
                        "No longer used."
                    ],
                    "name": "ActivationFailed",
                    "discriminant": 2
                },
                {
                    "docs": [
                        "Node is registered in the auction SC, active and producing rewards."
                    ],
                    "name": "Active",
                    "discriminant": 3
                },
                {
                    "docs": [
                        "UnStake call to auction sent, but callback not yet received."
                    ],
                    "name": "PendingDeactivation",
                    "discriminant": 4
                },
                {
                    "docs": [
                        "Same as Active, but no rewards are coming in.",
                        "This is necessary for a period of time before the stake can be retrieved and unlocked."
                    ],
                    "name": "UnBondPeriod",
                    "discriminant": 5,
                    "fields": [
                        {
                            "name": "started",
                            "type": "u64"
                        }
                    ]
                },
                {
                    "docs": [
                        "UnBond call to auction sent, but callback not yet received.",
                        "`unbond_started` field is needed in case unbonding fails and the UnBondPeriod state needs to be restored."
                    ],
                    "name": "PendingUnBond",
                    "discriminant": 6,
                    "fields": [
                        {
                            "name": "unbond_started",
                            "type": "u64"
                        }
                    ]
                },
                {
                    "docs": [
                        "Node completely removed from the delegation contract."
                    ],
                    "name": "Removed",
                    "discriminant": 7
                }
            ]
        }
    }
}